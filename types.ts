// types.ts

// --- Base Interfaces ---

export type Json =
  | string
  | number
  | boolean
  | null
  // FIX: Restore `| undefined` to object property values. While `undefined` isn't a valid JSON value,
  // Supabase's internal types use this to correctly handle optional properties within JSON objects,
  // and its absence can lead to cascading type inference failures.
  | { [key: string]: Json | undefined }
  | Json[];

export interface TimeSlot {
  start: number;
  end: number;
}

// FIX: Changed dayOfWeek key to be a string. While Date.getDay() returns a number, object keys for JSON data (like in Supabase) must be strings. This fixes Supabase client type inference issues.
export type Availability = {
  [dayOfWeek: string]: TimeSlot[];
};

export interface Service {
  id: number;
  created_at?: string;
  name: string;
  description: string;
  duration: number; // in minutes
  price: number;
  icon: string;
}

export interface Professional {
  id: number;
  created_at?: string;
  user_id: string; // Foreign key to auth.users.id
  name:string;
  specialty: string;
  bio: string;
  photoUrl: string;
  services: number[]; // array of service ids
  // FIX: Used specific `Availability` type instead of generic `Json` to fix Supabase type inference issues.
  availability: Availability;
  bookingSlotInterval: number; // in minutes, e.g., 15, 30, 60
}

export interface Appointment {
  id: number;
  created_at?: string;
  professionalId: number;
  serviceId: number;
  clientName: string;
  clientWhatsapp: string;
  startTime: Date;
  endTime: Date;
}

export interface AppointmentRow {
  id: number;
  created_at?: string;
  professionalId: number;
  serviceId: number;
  clientName: string;
  clientWhatsapp: string;
  startTime: string; // ISO String
  endTime: string; // ISO String
}

export interface User {
  id: string;
  name: string;
  email: string;
  role: 'client' | 'professional';
}

// --- Supabase-specific types for Database schema ---

export type ProfessionalInsert = {
    user_id: string;
    name: string;
    specialty: string;
    bio: string;
    photoUrl: string;
    services: number[];
    // FIX: Use `Availability` type for consistency with `Professional` interface.
    availability: Availability;
    bookingSlotInterval: number;
};

export type ProfessionalUpdate = {
    name?: string;
    specialty?: string;
    bio?: string;
    photoUrl?: string;
    services?: number[];
    // FIX: Use `Availability` type for consistency with `Professional` interface.
    availability?: Availability;
    bookingSlotInterval?: number;
};

export type ServiceInsert = {
    name: string;
    description: string;
    duration: number;
    price: number;
    icon: string;
};

export type ServiceUpdate = {
    name?: string;
    description?: string;
    duration?: number;
    price?: number;
    icon?: string;
};

export type AppointmentRowInsert = {
    professionalId: number;
    serviceId: number;
    clientName: string;
    clientWhatsapp: string;
    startTime: string;
    endTime: string;
};

export type AppointmentRowUpdate = {
    professionalId?: number;
    serviceId?: number;
    clientName?: string;
    clientWhatsapp?: string;
    startTime?: string;
    endTime?: string;
};


// Este tipo Ã© gerado para dar ao cliente Supabase o conhecimento do seu schema de banco de dados.
// Por enquanto, vamos defini-lo manualmente com base em nossas interfaces.
export type Database = {
  public: {
    Tables: {
      professionals: {
        Row: Professional;
        Insert: ProfessionalInsert;
        Update: ProfessionalUpdate;
      };
      services: {
        Row: Service;
        Insert: ServiceInsert;
        Update: ServiceUpdate;
      };
      appointments: {
        Row: AppointmentRow;
        Insert: AppointmentRowInsert;
        Update: AppointmentRowUpdate;
      };
    };
    // FIX: The type `{[key: string]: never}` was incorrect for empty schema objects.
    // It is too restrictive and caused the Supabase client to infer `never` for all table operation types.
    // The correct type for an empty object, as generated by `supabase gen types`, is `{[key in never]: never}`.
    Views: {
      [key in never]: never
    };
    Functions: {
      [key in never]: never
    };
    Enums: {
      [key in never]: never
    };
    CompositeTypes: {
      [key in never]: never
    };
  };
};